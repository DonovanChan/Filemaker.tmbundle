#!/usr/bin/env ruby -KU
# encoding: UTF-8
#
# commands.cmds - Stores mapping of bundle commands to ruby methods and documentation
#
# Author::      Donovan Chandler (mailto:donovan_c@beezwax.net)
# Copyright::   Copyright (c) 2010-2012 Donovan Chandler
# License::     Distributed under GNU General Public License <http://www.gnu.org/licenses/>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# require "rubygems"
# require "bundler/setup"

base_path = File.dirname(__FILE__)

$LOAD_PATH.unshift(File.expand_path(base_path) + '/resources')

require base_path + '/lib/commands.rb'
require base_path + '/lib/filemaker.rb'
require base_path + '/commands/calculation.rb'
require base_path + '/commands/clipboard_generation.rb'
require base_path + '/commands/clipboard_extraction.rb'
require base_path + '/commands/clipboard_pre12.rb'
include FileMaker

tips = %Q{* The resulting XML is more readable if the current document is set to the "FileMaker Clipboard" language.
* Press Cmd-B to load the current document or selected text onto the FileMaker clipboard. Only works if language is set to "FileMaker Clipboard."
* Press Cmd-Ctl-T to access commands easier.
* Optional values can be empty, even if you have tabs extending out to other columns on the right.}

# Returns readable version of exception, providing additional info if debugging is on (FileMaker::DEBUG_ON = true)
# @param [Object] Exception object
# @return [String] Readable exception message
def return_error(exception)
  if FileMaker::DEBUG_ON
    exception.message + "\n\n" + exception.backtrace.join("\n")
  else
    exception.message
  end
end

desc "Loads XML from selection or current document onto clipboard as FileMaker object."
doc %Q{
## Load Snippet

### Description
Loads XML from selection or current document onto clipboard as FileMaker object.

### Example Usage
* Select the lines below and run the command again.
* The following snippet represents a field that you can paste into the Define Database window after loading onto the clipboard.

  ~~~~
  <?xml version="1.0"?>
  <fmxmlsnippet type="FMObjectList">
  	<Field id="90" dataType="Text" fieldType="Normal" name="g_Scratch">
  		<Comment>Field created as a test of TextMate bundle</Comment>
  		<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
  			<ConstantData/>
  		</AutoEnter>
  		<Storage indexLanguage="English" global="True" maxRepetition="1"/>
  	</Field>
  </fmxmlsnippet>
  ~~~~

### Tips
* If the snippet doesn't loadâ€¦
	1. Ensure that the XML is valid. You can do this by running the Tidy command in the XML bundle (Ctl+Shift+H when in FileMaker Clipboard language).
	2. Check for unusual characters that might cause encoding issues, like high-ascii characters.
	3. Check that the snippet isn't missing any required elements or attributes. You're on your own with this one, but you can always copy an existing FileMaker object to compare the clipboard output.
}
command :load_snippet do |text|
  begin
    doc = Snippet.new(text)
    result = FileMaker::Clipboard.set(doc)
    if result.nil?
    	"Unrecognized clipboard format.\nTry running Tidy command first."
    else
    	"Snippet ready to paste into FileMaker"
    end
  rescue => e
    # e.message + "\n" + e.backtrace.join("\n")
    return_error(e)
  end
end

desc "Loads function to clipboard as snippet"
doc %Q{
## Load Function

### Description
Loads custom function text onto pasteboard for pasting into FileMaker.
Requires format specified in custom function template supplied with bundle.

### Example Usage
* Create a new document from the FileMaker custom function template
  `Select File > New From Template > FileMaker > Custom Function`
* Fill in the blanks
* Then run this command again

### Tips
* Functions must be in recognized format.
* Recognized format matches the Custom Function template provided in this bundle.
* The essential aspect really is to have a full syntax example of your function written after a label matching this: "#{ENV['TM_FUNCTION_EXAMPLE_LABEL']}".
* You can customize this label in the bundle variables.
}
command :load_function do |text,prefixToPrototype|
  begin
    doc = FileMaker::Snippet.new
    calc = doc.parse_function(text,prefixToPrototype)
    result = FileMaker::Clipboard.set(doc)
    "Function ready to paste into FileMaker"
  rescue Exception => e
  	"Unrecognized function format.\nRun this command on an empty document for instructions.\n" + return_error(e)
  end
end

desc "Opens documentation for function/script step/error"
doc ""
command :get_documentation do |search|
  url = FileMaker::FMHelp.get_doc_or_prompt(search)
  puts "<meta http-equiv='Refresh' content='0;URL=#{url}'>"
end